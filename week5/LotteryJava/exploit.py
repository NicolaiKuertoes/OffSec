#!/usr/bin/env python3
class LCG:
    a = 25214903917
    c = 11
    m = 2 ** 48 - 1
    state = 0

    def __init__(self, seed):
        self.state = self.init_scamble(seed)

    def init_scamble(self, seed):
        return (seed ^ 25214903917) & 281474976710655

    def next(self, bits):
        self.state = (self.a * self.state + self.c) & self.m
        return (self.state >> 48 - bits) & ((1 << 31) - 1)

    def nextInt(self):
        return self.next(31)

# first two outputs from lottery -> nc hackfest.redrocket.club 33004
states = [1797170273, 1368193422]
# used to show message if we don't get a prediction
status = 1
# generating a LCG to predict the next number
l = LCG(0)
# bruteforce 65536 possible seeds
for i in range(2 ** 16):
    # calculates a seed
    seed = (states[0] * (2 ** 17)) + i
    # sets the seed as the current state of the LCG
    l.state = seed
    prev = l.nextInt()
    # check if current seed generates the second number from the lottery
    if prev == states[1]:
        status = 0
        # prints the previous number we predicted
        print("prev:", prev)
        # prints the next number for the win
        print("next:", l.nextInt())
        break

if status:
    print("try again")
