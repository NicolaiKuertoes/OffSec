class LCG:
    a = 25214903917
    c = 11
    m = 2 ** 48 - 1
    state = 0

    def __init__(self, seed):
        self.state = self.init_scamble(seed)

    def init_scamble(self, seed):
        return (seed ^ 25214903917) & 281474976710655

    def next(self, bits):
        self.state = (self.a * self.state + self.c) & self.m
        return (self.state >> 48 - bits) & ((1 << 31) - 1)

    def nextInt(self):
        return self.next(31)


# Getting the seed
# numbers given by lottery
S1 = 262330252
S2 = 1609326231
S3 = 614244350

S4 = 1744742250

# multiplier a and other values determined by Java
a = 25214903917
c = 11
m = 2 ** 48 - 1

# 16 bit to guess
for i in range(65537):
    # seed muss jedes mal neu berechnet werden, wenn eine Nummer generiert wird
    seed = (S3 << 17) + i
    # shift und overflow rescue (in Java wÃ¼rde >>> gehen)
    nextOut = (((a * seed + c) & m) >> 17) & ((1 << 31) - 1)
    if (nextOut == S4):
        #print("test seed:\t", seed)
        #print("test int:\t", nextOut)
        # calculate next seed
        firstPart = (seed * a + c) & m
        s5Seed = (firstPart * a + c) & m
        #print("seed:\t\t", s5Seed)
        # calculate next "random"
        S5prob = ((s5Seed >> 17) & ((1 << 31) - 1))
        print("next:\t\t", S5prob)
