
from Crypto.Cipher import AES
from Crypto.Util import Padding
import time

start_time = time.time()

file = open('output.txt', 'r')
lines = file.readlines()

iv      = (lines[0])[:32] # first 16 bytes
output  = (lines[0])[32:64] # encryptet png
key1    = (lines[1])[:-1] # 13 bytes
key2    = (lines[2])[:-1] # 13 bytes
flag = (lines[0])[32:-1] # encrypted png

# 8 bytes PNG header from decimal to bytearray
png_header = [137, 80, 78, 71, 13, 10, 26, 10]
png_hex = ""
for i in png_header:
    png_hex += str(hex(i)[2:].zfill(2))
png = bytearray(bytes.fromhex(png_hex + "0000000d49484452")) # first 8 bytes + next 8

def bruteForceKey(key1, key2, number):
    print("Bruteforcing keys...")
    iterations = number
    count = 0
    table = {}
    for _ in range(6):
        key1 += str(0)
    key1 = bytearray(bytes.fromhex(key1))
    for i in range(iterations):
        for j in range(iterations):
            for k in range(iterations):
                count += 1
                key1[13] = i
                key1[14] = j
                key1[15] = k
                aes1 = AES.new(bytes(key1), AES.MODE_CBC, bytes.fromhex(iv))
                plain = aes1.decrypt(bytes.fromhex(output))
                table[bytes(plain).hex()] = key1.hex()
    print(str(count) + " entries in table\n")
    print("Looking for a match in table...\n")
    for _ in range(6):
        key2 += str(0)
    key2 = bytearray(bytes.fromhex(key2))
    matchFound = False
    for i in range(iterations):
        for j in range(iterations):
            for k in range(iterations):
                key2[13] = i
                key2[14] = j
                key2[15] = k
                aes2 = AES.new(bytes(key2), AES.MODE_CBC, bytes.fromhex(iv))
                key2_cipher = aes2.encrypt(bytes(png))
                if key2_cipher.hex() in table:
                    print("Match found!")
                    print("key1:\t", table[key2_cipher.hex()], "\nkey2:\t", key2.hex())
                    getFlag(iv, table[key2_cipher.hex()], key2.hex(), flag)
                    matchFound = True
                    break
            if matchFound:
                break
        if matchFound:
            break

def getFlag(iv, key1, key2, flag):
    aes1 = AES.new(bytes.fromhex(key1), AES.MODE_CBC, bytes.fromhex(iv))
    aes2 = AES.new(bytes.fromhex(key2), AES.MODE_CBC, bytes.fromhex(iv))
    open("flag.png", 'wb').write(Padding.unpad(aes2.decrypt(aes1.decrypt(bytes.fromhex(flag))), 16))
    print("checkout your flag.png")

bruteForceKey(key1, key2, 255)

print("--- %s seconds ---" % (time.time() - start_time))
