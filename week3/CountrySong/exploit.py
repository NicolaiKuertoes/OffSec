
from Crypto.Cipher import AES
from Crypto.Util import Padding
import binascii
import time

start_time = time.time()

file = open('output.txt', 'r')
lines = file.readlines()

iv      = (lines[0])[:32] # first 16 bytes
output  = (lines[0])[32:48] # enryptet png
key1    = (lines[1])[:-1] # 13 bytes
key2    = (lines[2])[:-1] # 13 bytes

# 8 bytes PNG header from decimal to bytearray
png_header = [137, 80, 78, 71, 13, 10, 26, 10]
png_hex = ""
for i in png_header:
    png_hex += str(hex(i)[2:].zfill(2))
png = bytearray(bytes.fromhex(png_hex))



def bruteForceKey(key1, key2, number):

    iterations = number

    count = 0

    key1_dec = []

    for _ in range(6):
        key1 += str(0)
    key1 = bytearray(bytes.fromhex(key1))

    for i in range(iterations):
        for j in range(iterations):
            for k in range(iterations):
                count += 1
                key1[13] = i
                key1[14] = j
                key1[15] = k
                aes1 = AES.new(bytes(key1), AES.MODE_CBC, bytes.fromhex(iv))
                plain = aes1.decrypt(Padding.pad(bytes.fromhex(output), 16))
                key1_dec.append(plain)
    print(key1_dec)
    print(str(count) + " entries")

    for _ in range(6):
        key2 += str(0)
    key2 = bytearray(bytes.fromhex(key2))

    aes2 = AES.new(bytes(key2), AES.MODE_CBC, bytes.fromhex(iv))

    for i in range(iterations):
        for j in range(iterations):
            for k in range(iterations):
                count += 1
                key2[13] = i
                key2[14] = j
                key2[15] = k
                key2_cipher = aes2.encrypt(Padding.pad(png, 16))
                if key2_cipher in key1_dec:
                    print("Match found!")
                    break
    print("No match found.")

bruteForceKey(key1, key2, 10)

print("--- %s seconds ---" % (time.time() - start_time))
