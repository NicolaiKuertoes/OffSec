from Crypto.Cipher import AES
import re

# encrypted output
output  = "05ef9caa70722673e46d8fddc560ad04d225c8eb82b9bafe0a13e7f9f2e12f493f82c74d5ffdffb81e6021e3da818ec3"
# given key, padded to 16 bytes
key_padded   = "797a05c26d83f0579780252f147a0000"
# extract the initialization vector
iv = bytes(bytearray(bytes.fromhex(output))[:16])

# guesses keys until the right one was found
def bruteForceKey():
    count = 0
    key = bytearray(bytes.fromhex(key_padded))
    for i in range(255):
        for j in range(255):
            count += 1
            key[14] = i
            key[15] = j
            cipher = AES.new(bytes(key), AES.MODE_CBC, iv)
            t_plain = cipher.decrypt(bytes.fromhex(output))
            # check if plaintext contains "flag"
            if t_plain.find(b'flag') != -1:
                print(f'\n[i]\tKey found after {count} iterations.\n')
                print(f'>>>\tkey:\t{bytes(key)}\n') # prints the brute-forced key
                #print(f'plain:\t{t_plain}') # prints the plaintext
                print(">>>\tflag:\t" + str(b'flag' + re.findall(b'\{.*?\}', t_plain)[0]) + "\n") # print the flag
                break

bruteForceKey()
